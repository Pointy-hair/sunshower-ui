/**
 * Buildscript Plugins Section
 *
 * @author haswell
 */
buildscript {
    apply from: 'gradle/buildscript.gradle', to: buildscript
}

ext {
    repoKey = getRepoKey()
}


/**
 * Subproject configurations
 */

subprojects {
    version = rootProject.version

    apply plugin: 'java'
    apply plugin: 'nebula.optional-base'
    apply plugin: 'nebula.provided-base'
    apply from: "$rootDir/gradle/dependencies.gradle"
    apply from: "$rootDir/gradle/idea.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/publishing.gradle"
    apply from: "$rootDir/gradle/tasks.gradle"
    apply from: "$rootDir/gradle/test.gradle"

    dependencies {
        provided('org.apache.logging.log4j:log4j-api')
        provided('org.apache.logging.log4j:log4j-core')
        provided('org.jboss.spec:jboss-javaee-7.0')

        [
                'orm',
                'context'
        ].each{
            provided("org.springframework:spring-$it")
        }

        provided('org.springframework:spring-context')
        [
                'core',
                'config',
                'acl',
                'crypto',
                'aspects',
                'ldap'
        ].each {
            provided("org.springframework.security:spring-security-$it")
        }
        provided group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.moxy'

        testCompile("org.springframework:spring-test")
        testCompile("org.springframework.security:spring-security-test")
    }


}

/**
 * Build BOM pom
 */

apply from: 'gradle/bom.gradle'


task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

def getRepoKey() {
    if (version =~ /(?i)FINAL/) {
        return 'libs-release-local'
    } else if (version =~ /(?i)BUILD|DEV/) {
        return 'libs-dev-local'
    } else {
        return 'libs-snapshot-local'
    }
}

defaultTasks "installBillOfMaterials", "clean", "build"
