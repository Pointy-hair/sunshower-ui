/**
 * Buildscript Plugins Section
 *
 * @author haswell
 */
buildscript {
    apply from: 'gradle/buildscript.gradle', to: buildscript
}

allprojects {
    apply plugin: 'java'
}


/**
 * Subproject configurations
 */

subprojects {
    version = rootProject.version

    apply plugin: 'java'
    apply plugin: 'nebula.optional-base'
    apply plugin: 'nebula.provided-base'
    apply from: "$rootDir/gradle/dependencies.gradle"
    apply from: "$rootDir/gradle/idea.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/publishing.gradle"
    apply from: "$rootDir/gradle/test.gradle"
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task buildEnvImage(type: DockerBuildImage) {
    group "Docker"
    dockerFile = new File("./resources/Dockerfile.build")
    inputDir = new File(".")
    tag = "hasli-ui/build-env"
}

task buildDevImage(type: DockerBuildImage) {
    group "Docker"
    dockerFile = new File("./resources/Dockerfile.dev")
    inputDir = new File(".")
    tag = "hasli-ui/ui-dev"
}

task buildProdImage(type: DockerBuildImage) {
    group "Docker"
    dockerFile = new File("./resources/Dockerfile.prod")
    inputDir = new File(".")
    tag = "hasli-ui/ui"
}

task buildImages() {
    group "Docker"
    dependsOn buildEnvImage, buildDevImage, buildProdImage
}

defaultTasks "clean", "build"
